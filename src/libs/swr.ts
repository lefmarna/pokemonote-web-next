import useSWR from 'swr'
import type { paths } from '@/types/openapi/autoGenerated'
import type {
  PathParameters,
  QueryParameters,
  Response,
} from '@/types/openapi/extractor'
import type { SWRConfiguration } from 'swr'

type PathParametersType<
  T extends {
    [K in keyof paths]: 'get' extends keyof paths[K] ? K : never
  }[keyof paths],
> = paths[T]['get'] extends {
  parameters: { path: PathParameters<T, 'get'> }
}
  ? { pathParameters: PathParameters<T, 'get'> }
  : paths[T]['get'] extends {
      parameters: { path?: PathParameters<T, 'get'> }
    }
  ? { pathParameters?: PathParameters<T, 'get'> }
  : { pathParameters?: undefined }

type QueryParametersType<
  T extends {
    [K in keyof paths]: 'get' extends keyof paths[K] ? K : never
  }[keyof paths],
> = paths[T]['get'] extends {
  parameters: { query: QueryParameters<T, 'get'> }
}
  ? { queryParameters: QueryParameters<T, 'get'> }
  : paths[T]['get'] extends {
      parameters: { query?: QueryParameters<T, 'get'> }
    }
  ? { queryParameters?: QueryParameters<T, 'get'> }
  : { queryParameters?: undefined }

export const useOpenApiSWR = <
  T extends {
    [K in keyof paths]: 'get' extends keyof paths[K] ? K : never
  }[keyof paths],
>(
  url: T | null,
  options?: SWRConfiguration & PathParametersType<T> & QueryParametersType<T>
) => {
  const { pathParameters, queryParameters, ...swrOptions } = options ?? {}

  const params = {
    options: swrOptions,
    url:
      url !== null
        ? addUrlQueries(replaceUrlPaths(url, pathParameters), queryParameters)
        : null,
  }

  return useSWR<Response<T, 'get'>>(params.url, params.options)
}

/**
 * URLのパスパラメータを置換する
 */
const replaceUrlPaths = <
  T extends {
    [K in keyof paths]: 'get' extends keyof paths[K] ? K : never
  }[keyof paths],
>(
  url: T,
  pathParameters?: PathParameters<T, 'get'>
) => {
  if (!pathParameters) return url

  return Object.entries(pathParameters).reduce((prevUrl, [key, value]) => {
    if (value === null) return prevUrl
    return prevUrl.replace(`{${key}}`, String(value))
  }, url as string)
}

/**
 * URLのクエリパラメータを付与する
 */
const addUrlQueries = <
  T extends {
    [K in keyof paths]: 'get' extends keyof paths[K] ? K : never
  }[keyof paths],
>(
  url: string,
  queryParameters?: QueryParameters<T, 'get'>
) => {
  if (!queryParameters) return url

  const queries = Object.entries(queryParameters)
    .filter(([, value]) => value !== null || value !== undefined)
    .map(([key, value]) => {
      return `${key}=${encodeURIComponent(String(value))}`
    })

  if (queries.length === 0) return url

  return `${url}?${queries.join('&')}`
}
