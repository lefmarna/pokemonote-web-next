import useSWR from 'swr'
import type { paths } from '@/types/openapi/autoGenerated'
import type {
  PathParameters,
  QueryParameters,
  Response,
} from '@/types/openapi/extractor'
import type { SWRConfiguration } from 'swr'

type OpenApiGetPath = {
  [K in keyof paths]: 'get' extends keyof paths[K] ? K : never
}[keyof paths]

type ParametersType<
  Path extends OpenApiGetPath,
  Type extends 'path' | 'query',
  Parameters,
> = paths[Path]['get'] extends { parameters: { [K in Type]: Parameters } }
  ? { [K in `${Type}Parameters`]: Parameters }
  : paths[Path]['get'] extends { parameters: { [K in Type]?: Parameters } }
  ? { [K in `${Type}Parameters`]?: Parameters }
  : { [K in `${Type}Parameters`]?: undefined }

export const useOpenApiSWR = <T extends OpenApiGetPath>(
  url: T | null,
  options?: SWRConfiguration &
    ParametersType<T, 'path', PathParameters<T, 'get'>> &
    ParametersType<T, 'query', QueryParameters<T, 'get'>>
) => {
  const { pathParameters, queryParameters, ...swrOptions } = options ?? {}

  const params = {
    options: swrOptions,
    url:
      url !== null
        ? addUrlQueries(replaceUrlPaths(url, pathParameters), queryParameters)
        : null,
  }

  return useSWR<Response<T, 'get'>>(params.url, params.options)
}

/**
 * URLのパスパラメータを置換する
 */
const replaceUrlPaths = <T extends OpenApiGetPath>(
  url: T,
  pathParameters?: PathParameters<T, 'get'>
) => {
  if (!pathParameters) return url

  return Object.entries(pathParameters).reduce((prevUrl, [key, value]) => {
    if (value === null) return prevUrl
    return prevUrl.replace(`{${key}}`, String(value))
  }, url as string)
}

/**
 * URLのクエリパラメータを付与する
 */
const addUrlQueries = <T extends OpenApiGetPath>(
  url: string,
  queryParameters?: QueryParameters<T, 'get'>
) => {
  if (!queryParameters) return url

  const queries = Object.entries(queryParameters)
    .filter(([, value]) => value !== null || value !== undefined)
    .map(([key, value]) => {
      return `${key}=${encodeURIComponent(String(value))}`
    })

  if (queries.length === 0) return url

  return `${url}?${queries.join('&')}`
}
