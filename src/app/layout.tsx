'use client'

import { createTheme, ThemeProvider } from '@mui/material'
import axios, { AxiosError } from 'axios'
import { memo, useEffect } from 'react'
import { RecoilRoot, useSetRecoilState } from 'recoil'
import useSWR, { SWRConfig } from 'swr'
import './globals.scss'
import { authUserState, natureDataState, pokemonDataState } from '@/store'

// export const metadata = {
//   title: 'Create Next App',
//   description: 'Generated by create next app',
// }

const AppInit = memo(() => {
  const setAuthUser = useSetRecoilState(authUserState)
  const setPokemonData = useSetRecoilState(pokemonDataState)
  const setNatureData = useSetRecoilState(natureDataState)

  const { data } = useSWR('init')

  useEffect(() => {
    if (!data) return
    setAuthUser(data.data.auth_user)
    setPokemonData(data.data.pokemon_data)
    setNatureData(data.data.nature_data)
  }, [data, setAuthUser, setPokemonData, setNatureData])

  return <></>
})

const RootLayout = ({ children }: { children: React.ReactNode }) => {
  axios.defaults.baseURL = process.env.NEXT_PUBLIC_BASE_URL
  axios.defaults.withCredentials = true

  const theme = createTheme({
    palette: {
      secondary: {
        main: '#424242',
      },
    },
  })

  const swrConfigValue = {
    fetcher: (url: string) => axios.get(url).then((res) => res.data),
    onError: (error: AxiosError) => {
      switch (error.status) {
        case 404:
          console.log(error)
          break
        case 403:
          console.log(error)
          break
        default:
          console.log(error)
      }
    },
  }

  return (
    <html lang="ja">
      <ThemeProvider theme={theme}>
        <RecoilRoot>
          <SWRConfig value={swrConfigValue}>
            {/* <Header /> */}
            <AppInit />
            <body>{children}</body>
          </SWRConfig>
        </RecoilRoot>
      </ThemeProvider>
    </html>
  )
}

export default RootLayout
